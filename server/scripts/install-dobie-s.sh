#!/bin/bash


echo "Dobie Server Installation Script"
echo "================================"

echo "Creating directory for Dobie Server Logs.."
sudo mkdir -p /var/log/dobie-s/

echo "Creating directory for Dobie Server Database Dumps.."
sudo mkdir -p /var/cache/dobie-db-dumps/

echo "Creating directory to storage person's images.."
sudo mkdir -p /var/lib/dobie-pers-imgs/

#read -p "Do you want to set log rotation for Dobie Server (y/n): " answer
#if [ $answer == y ] || [ $answer == Y ]; then

echo "Configuring log rotation.."
cat > /tmp/dobie-s.logrotate << EOL
/var/log/dobie-s/dobie-s.log
{
    daily
    missingok
    rotate 10
    notifempty
}


/var/log/dobie-s/dobie-purger.log
{
    monthly
    missingok
    rotate 10
    notifempty
}


EOL

sudo cp /tmp/dobie-s.logrotate /etc/logrotate.d/dobie-s
sudo rm /tmp/dobie-s.logrotate


read -p "Are you installing Dobie Server in the same controller (y/n): " answer
#Change to the directory where the docker-compose.yml file is located and
#save the complete path of the directory in the variable DOCK_COMP_DIR to
#be able to create then the systemd unit to start all the containers
if [ $answer == y ] || [ $answer == Y ]; then
  cd ../ctrller_docker/
  DOCK_COMP_DIR=$(realpath .)
else
  cd ../docker/
  DOCK_COMP_DIR=$(realpath .)
fi

#Building the containers without starting them
echo "Building Docker containers.."
docker-compose -p dobie up --no-start

echo "Setting Dobie Server as Systemd service.."
cat > /tmp/dobie-s.service << EOL
[Unit]
Description=Docker Compose Dobie Containers
After=docker.service network-online.target
Requires=docker.service network-online.target

[Service]
Type=oneshot
RemainAfterExit=yes

ExecStart=/usr/bin/docker-compose -p dobie -f $DOCK_COMP_DIR/docker-compose.yml start
ExecStop=/usr/bin/docker-compose -p dobie -f $DOCK_COMP_DIR/docker-compose.yml stop


[Install]
WantedBy=multi-user.target
EOL
sudo cp /tmp/dobie-s.service /etc/systemd/system/
sudo rm /tmp/dobie-s.service

sudo systemctl daemon-reload

read -p "Do you want to start Dobie Server at boot time (y/n): " answer
if [ $answer == y ] || [ $answer == Y ]; then
  sudo systemctl enable dobie-s.service
fi

#Now starting all the containers using the previously created unit
echo "Starting Dobie server (all the containers).."
sudo systemctl start dobie-s.service


#If there is any previous DB, reset it
echo "Erasing any previous database and setting initial values to it.."
cd ../scripts/
docker stop backend > /dev/null 2>&1
./db-create-drop.sh -r 
docker start backend > /dev/null 2>&1


#Every day at 07:07:07 the purge-old-events.sh is run receiving 
#the amount of months to keep in DB.
#To do this, a systemd timer is created.
read -p "How many months of events do you want to store in Database: " MONTH
cat > /tmp/dobie-purge-db.service << EOL
[Unit]
Description=Purge old events of Dobie DB

[Service]
Type=oneshot
ExecStart=/bin/bash -c 'UNTIL_DATE_TIME=\$\$(date --date "$MONTH month ago" +%%Y-%%m-%%d\ %%H:%%M); docker run --name db-purger --rm --network dobie_dobie-net -v $(realpath ../back_end):/opt/dobie-server -v /var/log/dobie-s:/var/log/dobie-s -v /var/lib/dobie-pers-imgs:/var/lib/dobie-pers-imgs dobie_backend python -u /opt/dobie-server/purgeevents.py -d "\$\${UNTIL_DATE_TIME}"'
EOL
#The backslash in $\$\ was used to escape the $ and tell this script not to consider the following as variable.
#The resulting $$, and %% is used to escape $ and % in resulting unit of systemd.
#The "UNTIL_DATE_TIME" variable is filled in the same bash execution of "docker run" execution, to be passed to the "docker run" command.
#Trying to execute $(date..) command inside the docker run command didn't work, since in this case (alphine image),
#"date" command inside the docker, has a minimal options which don't support some arguments used in this one.

sudo cp /tmp/dobie-purge-db.service /etc/systemd/system/
sudo rm /tmp/dobie-purge-db.service 

cat > /tmp/dobie-purge-db.timer << EOL
[Unit]
Description=Weekly purge old events of Dobie DB

[Timer]
OnCalendar=*-*-* 07:07:07

[Install]
WantedBy=timers.target
EOL
sudo cp /tmp/dobie-purge-db.timer /etc/systemd/system/
sudo rm /tmp/dobie-purge-db.timer

sudo systemctl daemon-reload
sudo systemctl enable dobie-purge-db.timer
sudo systemctl start dobie-purge-db.timer



#The following scripts are used to save and restore the DB at any moment.
#They should be executed by the user.
#The script which restores the database, receives the file generated by the
#script which saves the database, as an argument.
#This script stops the backend before restoring the DB to avoid freezing
#in some cases. 
echo "Installing scripts to save and restore Dobie DB.."
read -p "How many days of database dumps do you want to store in /var/cache/dobie-db-dumps: " DAYS
cat > /tmp/dobie-save-db << EOL
#!/bin/bash

. $(realpath db-config)

find /var/cache/dobie-db-dumps/ -type f -mtime +$DAYS -delete

DB_DOCKER_IP=\$(tr -d '", ' <<< \$(docker inspect database | grep '"IPAddress": "1' | gawk '{print \$2}'))

mysqldump -u \$DB_USER -p\$DB_PASSWD -h \$DB_DOCKER_IP \$DB_DATABASE > /var/cache/dobie-db-dumps/dobie_db_\$(date +%F_%H%M).dump
EOL
sudo cp /tmp/dobie-save-db /usr/local/sbin/dobie-save-db
sudo rm /tmp/dobie-save-db
sudo chmod +x /usr/local/sbin/dobie-save-db


cat > /tmp/dobie-restore-db << EOL
#!/bin/bash

. $(realpath db-config)

DB_DOCKER_IP=\$(tr -d '", ' <<< \$(docker inspect database | grep '"IPAddress": "1' | gawk '{print \$2}'))

echo "Stopping Backend.."
docker stop backend

echo "Restoring DB.."
mysql -u \$DB_USER -p\$DB_PASSWD -h \$DB_DOCKER_IP \$DB_DATABASE < \$1

echo "Starting Backend.."
docker start backend
EOL
sudo cp /tmp/dobie-restore-db /usr/local/sbin/dobie-restore-db
sudo rm /tmp/dobie-restore-db
sudo chmod +x /usr/local/sbin/dobie-restore-db


#Every day at 05:07:07 dobie-save-db is run 
cat > /tmp/dobie-save-db.service << EOL
[Unit]
Description=Dump Dobie DB and remove old dumps.

[Service]
Type=oneshot
ExecStart=/bin/bash -c '/usr/local/sbin/dobie-save-db'
EOL
sudo cp /tmp/dobie-save-db.service /etc/systemd/system/
sudo rm /tmp/dobie-save-db.service

cat > /tmp/dobie-save-db.timer << EOL
[Unit]
Description=Daily dump Dobie DB and remove old dumps.

[Timer]
OnCalendar=*-*-* 05:07:07

[Install]
WantedBy=timers.target
EOL
sudo cp /tmp/dobie-save-db.timer /etc/systemd/system/
sudo rm /tmp/dobie-save-db.timer

sudo systemctl daemon-reload
sudo systemctl enable dobie-save-db.timer
sudo systemctl start dobie-save-db.timer

